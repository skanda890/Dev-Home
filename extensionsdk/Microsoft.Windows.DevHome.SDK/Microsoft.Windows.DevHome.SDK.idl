namespace Microsoft.Windows.DevHome.SDK
{
    [contractversion(7)]
    apicontract DevHomeContract {}

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IExtension {
        IInspectable GetProvider(ProviderType providerType);
        void Dispose();
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    enum ProviderType {
        Repository = 0,
        DeveloperId = 1,
        Settings = 2,
        FeaturedApplications = 3,

        // Indicates the ComputeSystem provider type. Extensions that support this provider type must return
        // an object that implements the IComputeSystemProvider interface.
        [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
        ComputeSystem = 4,

        [experimental]
        [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 6)]
        QuickStartProject = 5,

        [experimental]
        [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 7)] 
        LocalRepository = 6,
    };

    // Definitions for exceptions.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    enum ProviderOperationStatus {
        Success,
        Failure
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass ProviderOperationResult {
        ProviderOperationResult(ProviderOperationStatus status, HRESULT error, String displayMessage, String diagnosticText);

        ProviderOperationStatus Status
        {
            get;
        };
        HRESULT ExtendedError
        {
            get;
        };
        String DisplayMessage
        {
            get;
        };
        String DiagnosticText
        {
            get;
        };
    };

    // Repository Provider
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IRepositoryProvider
        requires Windows.Foundation.IClosable
    {
        String DisplayName
        {
            get;
        };
        Windows.Storage.Streams.IRandomAccessStreamReference Icon
        {
            get;
        };

        Windows.Foundation.IAsyncOperation<RepositoriesResult> GetRepositoriesAsync(IDeveloperId developerId);

        Windows.Foundation.IAsyncOperation<RepositoryUriSupportResult> IsUriSupportedAsync(Windows.Foundation.Uri uri);
        Windows.Foundation.IAsyncOperation<RepositoryUriSupportResult> IsUriSupportedAsync(Windows.Foundation.Uri uri, IDeveloperId developerId);

        Windows.Foundation.IAsyncOperation<RepositoryResult> GetRepositoryFromUriAsync(Windows.Foundation.Uri uri);
        Windows.Foundation.IAsyncOperation<RepositoryResult> GetRepositoryFromUriAsync(Windows.Foundation.Uri uri, IDeveloperId developerId);

        Windows.Foundation.IAsyncOperation<ProviderOperationResult> CloneRepositoryAsync(IRepository repository, String cloneDestination);
        Windows.Foundation.IAsyncOperation<ProviderOperationResult> CloneRepositoryAsync(IRepository repository, String cloneDestination, IDeveloperId developerId);
    };

        [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 3)] interface IRepositoryProvider2
        requires IRepositoryProvider
    {
        String[] SearchFieldNames
        {
            get;
        };

        Boolean IsSearchingSupported
        {
            get;
        };

        String AskToSearchLabel
        {
            get;
        };

        // This should return a list of suggestions given fieldValues.
        // "Suggestions" is dependant on the extension and how it keeps track of repositories.
        Windows.Foundation.IAsyncOperation<IVectorView<String> > GetValuesForSearchFieldAsync(IMapView<String, String> fieldValues, String requestedSearchField, IDeveloperId developerId);
        Windows.Foundation.IAsyncOperation<RepositoriesSearchResult> GetRepositoriesAsync(IMapView<String, String> fieldValues, IDeveloperId developerId);
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass RepositoryResult {
        RepositoryResult(IRepository repository);
        RepositoryResult(HRESULT e, String diagnosticText);

        IRepository Repository
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass RepositoriesResult {
        RepositoriesResult(IIterable<IRepository> repositories);
        RepositoriesResult(HRESULT e, String diagnosticText);

        IIterable<IRepository> Repositories
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

        [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 3)] runtimeclass RepositoriesSearchResult {
        RepositoriesSearchResult(IIterable<IRepository> repositories);
        RepositoriesSearchResult(IIterable<IRepository> repositories, String selectionsOptionsLabel, String[] selectionOptions, String selectionOptionsName);
        RepositoriesSearchResult(HRESULT e, String diagnosticText);

        IIterable<IRepository> Repositories
        {
            get;
        };

        String SelectionOptionsLabel
        {
            get;
        };

        String[] SelectionOptions
        {
            get;
        };

        String SelectionOptionsName
        {
            get;
        };

        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass RepositoryUriSupportResult {
        RepositoryUriSupportResult(Boolean isSupported);
        RepositoryUriSupportResult(HRESULT e, String diagnosticText);

        Boolean IsSupported
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IRepository {
        String DisplayName
        {
            get;
        };
        String OwningAccountName
        {
            get;
        };
        Boolean IsPrivate
        {
            get;
        };
        Windows.Foundation.DateTime LastUpdated
        {
            get;
        };
        Windows.Foundation.Uri RepoUri
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    enum AuthenticationState {
        LoggedIn = 0,
        LoggedOut = 1
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    enum AuthenticationExperienceKind {
        CustomProvider = 0,
        CardSession = 1
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass AdaptiveCardSessionResult {
        AdaptiveCardSessionResult(IExtensionAdaptiveCardSession adaptiveCardSession);
        AdaptiveCardSessionResult(HRESULT e, String diagnosticText);

        IExtensionAdaptiveCardSession AdaptiveCardSession
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass DeveloperIdResult {
        DeveloperIdResult(IDeveloperId developerId);
        DeveloperIdResult(HRESULT e, String diagnosticText);

        IDeveloperId DeveloperId
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass DeveloperIdsResult {
        DeveloperIdsResult(IIterable<IDeveloperId> developerIds);
        DeveloperIdsResult(HRESULT e, String diagnosticText);

        IIterable<IDeveloperId> DeveloperIds
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    // IDeveloperId is the basic interface for DeveloperId corresponding to each logged in user, used by the Dev Home Core app
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IDeveloperId {
        String LoginId
        {
            get;
        };

        String Url
        {
            get;
        };
    };

    // Developer ID
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IDeveloperIdProvider
        requires Windows.Foundation.IClosable
    {
        String DisplayName
        {
            get;
        };

        DeveloperIdsResult GetLoggedInDeveloperIds();

        ProviderOperationResult LogoutDeveloperId(IDeveloperId developerId);

        event Windows.Foundation.TypedEventHandler<IDeveloperIdProvider, IDeveloperId> Changed;

        AuthenticationState GetDeveloperIdState(IDeveloperId developerId);

        // The extension chooses to support one enum Option. Once defined by the extension this value cannot be
        // changed by DevHome or the extension itself.
        AuthenticationExperienceKind GetAuthenticationExperienceKind();

        //ExtensionProvidedExperience
        Windows.Foundation.IAsyncOperation<DeveloperIdResult> ShowLogonSession(Microsoft.UI.WindowId windowHandle);

        //DevHomeIntegratedCard
        AdaptiveCardSessionResult GetLoginAdaptiveCardSession();
    };

    // Settings
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface ISettingsProvider
        requires Windows.Foundation.IClosable
    {
        String DisplayName
        {
            get;
        };

        //DevHomeIntegratedCard
        AdaptiveCardSessionResult GetSettingsAdaptiveCardSession();
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IExtensionAdaptiveCardSession {
        ProviderOperationResult Initialize(IExtensionAdaptiveCard extensionUI);
        void Dispose();
        Windows.Foundation.IAsyncOperation<ProviderOperationResult> OnAction(String action, String inputs);
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IExtensionAdaptiveCard {
        String TemplateJson
        {
            get;
        };
        String DataJson
        {
            get;
        };
        String State
        {
            get;
        };

        ProviderOperationResult Update(String templateJson, String dataJson, String state);
    };

    // Interface to get the list of featured applications
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IFeaturedApplicationsProvider {
        Windows.Foundation.IAsyncOperation<GetFeaturedApplicationsGroupsResult> GetFeaturedApplicationsGroupsAsync();
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass GetFeaturedApplicationsGroupsResult {
        GetFeaturedApplicationsGroupsResult(IVectorView<IFeaturedApplicationsGroup> featuredApplicationsGroup);
        GetFeaturedApplicationsGroupsResult(HRESULT e, String diagnosticText);

        IVectorView<IFeaturedApplicationsGroup> FeaturedApplicationsGroups
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass GetFeaturedApplicationsResult {
        GetFeaturedApplicationsResult(IVectorView<String> featuredApplications);
        GetFeaturedApplicationsResult(HRESULT e, String diagnosticText);

        IVectorView<String> FeaturedApplications
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    }

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IFeaturedApplicationsGroup {
        String GetTitle(String preferredLocale);
        String GetDescription(String preferredLocale);
        GetFeaturedApplicationsResult GetApplications();
    };

    // IExtensionAdaptiveCardSession2 interface that extends IExtensionAdaptiveCardSession. It is used
    // to provide Dev Home with a way to know when an adaptive card session has stopped.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    interface IExtensionAdaptiveCardSession2 
        requires IExtensionAdaptiveCardSession
    {
        // Event used to signal to Dev Home from the extension that the Adaptive Card session has stopped.
        event Windows.Foundation.TypedEventHandler<IExtensionAdaptiveCardSession2, ExtensionAdaptiveCardSessionStoppedEventArgs> Stopped;
    };

    // The event data that is sent back to Dev Home when an adaptive card session has completed.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ExtensionAdaptiveCardSessionStoppedEventArgs 
    {
        ExtensionAdaptiveCardSessionStoppedEventArgs(ProviderOperationResult result, String resultJson);

        // The json result   the extension sends back to Dev Home based on an interaction with the user. This
        // for example allows extension specific user input for an extension's method, to be
        // passed back to Dev Home, so Dev Home can use it, as a parameter when calling the method.
        String ResultJson
        {
            get;
        };

        // The result for the session event. The session ending with ProviderOperationStatus.Success signals
        // that the session ended without error. ProviderOperationStatus.Failure signals that it ended in
        // in failure.
        ProviderOperationResult Result
        {
            get;
        };
    }

    // Start of Dev Environments feature.

    // Result payload for ICreateComputeSystemOperation's StartAsync method that is returned to Dev Home when it attempts to create an IComputeSystem.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass CreateComputeSystemResult
    {
        // Used when creating a compute system was successful.
        CreateComputeSystemResult(IComputeSystem computeSystem);

        // Used when creating a compute system was unsuccessful.
        // The extension can provide Dev Home with an error message to be displayed in the UI, by providing
        // a non-empty value for the displayMessage. diagnosticText can be used to send non-localized error
        // information back to Dev Home
        CreateComputeSystemResult(HRESULT e, String displayMessage, String diagnosticText);

        // The newly created compute system object.
        IComputeSystem ComputeSystem
        {
            get;
        };

        // The result of the operation. This contains the ProviderOperationStatus enum value that tells Dev Home
        // whether the result was successful or failed. It is created based on the constructor that was used.
        ProviderOperationResult Result
        {
            get;
        };
    };

    // These enums are used specifically for requesting an adaptive card sessions from the compute system
    // provider.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    enum ComputeSystemAdaptiveCardKind
    {
        CreateComputeSystem = 0,
        ModifyComputeSystemProperties = 1,
    };

    // Enumeration to indicate operations supported by the Compute System provider. Dev Home will used these
    // flags to know what operations the compute system providers support.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    [flags]
    enum ComputeSystemProviderOperations
    {
            None = 0x0,
            CreateComputeSystem = 0x00000001,
    };

    // The interface returned by the IComputeSystemProvider when the CreateCreateComputeSystemOperation method is called.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    interface ICreateComputeSystemOperation
    {
        // Event that DevHome can subscribe to to receive progress data from the operation.
        event Windows.Foundation.TypedEventHandler<ICreateComputeSystemOperation, CreateComputeSystemProgressEventArgs> Progress;

        // Event that Dev Home can subscribe to to receive data that the user needs to take action on.
        event Windows.Foundation.TypedEventHandler<ICreateComputeSystemOperation, CreateComputeSystemActionRequiredEventArgs> ActionRequired;

        // Used to initiate the create compute system operation. Dev Home should subscribe to the events
        // before attempting to start the operation.
        Windows.Foundation.IAsyncOperation<CreateComputeSystemResult> StartAsync();
    };

    // The result object returned to Dev Home when it calls one of the IComputeSystemProviders
    // CreateAdaptiveCard methods.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ComputeSystemAdaptiveCardResult
    {
        // Used when retrieving the adaptive card session was successful.
        ComputeSystemAdaptiveCardResult(IExtensionAdaptiveCardSession2 cardSession);

        // Used when retrieving the adaptive card session was unsuccessful.
        // The extension can provide Dev Home with an error message to be displayed in the UI, by providing
        // a non-empty value for the displayMessage. diagnosticText can be used to send non-localized error
        // information back to Dev Home
        ComputeSystemAdaptiveCardResult(HRESULT e, String displayMessage, String diagnosticText);

        // The adaptive card session object.
        IExtensionAdaptiveCardSession2 ComputeSystemCardSession
        {
            get;
        };

        // The result of the operation. This contains the ProviderOperationStatus enum value that tells Dev Home
        // whether the result was successful or failed. It is created based on the constructor that was used.
        ProviderOperationResult Result
        {
            get;
        };
    };

    // Provider that Dev Home extensions can return to Dev Home. The provider is used to manage compute systems
    // within the extension.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    interface IComputeSystemProvider 
    {
        // Name of Compute System provider that can be displayed within Dev Home's UI
        String DisplayName
        {
            get;
        };

        // Identifier for the provider that can uniquely identify it from other compute system providers.
        String Id
        {
            get;
        };

        // The Uri to the icon resource whose path is located in a resource.pri file. The schema should
        // use the ms-resource:// schema.
        // E.g "ms-resource://HyperVExtension/Files/HyperVExtension/Assets/hyper-v-provider-icon.png"

        Windows.Foundation.Uri Icon
        {
            get;
        };

        // Enumeration that is fixed and tells Dev Home which operations the provider supports.
        ComputeSystemProviderOperations SupportedOperations
        {
            get;
        };

        // Creates a provider specific adaptive card that can be used to display UI from the compute system
        // provider within Dev Home. For example, Dev Home will not know the specific details required for the
        // creation of any compute system. Compute system providers all have different creation requirements,
        // so allowing the provider to provide its specialized UI addresses this need.
        ComputeSystemAdaptiveCardResult CreateAdaptiveCardSessionForDeveloperId(IDeveloperId developerId, ComputeSystemAdaptiveCardKind sessionKind);

        // Creates a provider specific adaptive card that can be used to display UI from the compute system
        // provider within Dev Home.
        ComputeSystemAdaptiveCardResult CreateAdaptiveCardSessionForComputeSystem(IComputeSystem computeSystem, ComputeSystemAdaptiveCardKind sessionKind);

        // Creates a new compute system from user provided json, specific to the compute system technology.
        // For creation the adaptive card session should be used like a "Form". Upon invoking the submission,
        // the user input can be validated by the extension. Who can then pass the form inputs back to DevHome
        // by raising the IExtensionAdaptiveCardSession2::Stopped event.
        ICreateComputeSystemOperation CreateCreateComputeSystemOperation(IDeveloperId developerId, String inputJson);

        // Returns existing Compute Systems for a specific DeveloperId.
        Windows.Foundation.IAsyncOperation<ComputeSystemsResult> GetComputeSystemsAsync(IDeveloperId developerId);
    };

    // Enumeration that defines operations supported by a ComputeSystem.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    [flags]
    enum ComputeSystemOperations
    {
        None = 0x0,
        Start = 0x00000001,
        ShutDown = 0x00000002,
        Terminate = 0x00000004,
        Delete = 0x00000008,
        Save = 0x00000010,
        Pause = 0x00000020,
        Resume = 0x00000040,
        Restart = 0x00000080,
        CreateSnapshot = 0x00000100,
        RevertSnapshot = 0x00000200,
        DeleteSnapshot = 0x00000400,
        ApplyConfiguration = 0x00000800,
        ModifyProperties = 0x00001000,
        [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 4)]
        PinToStartMenu = 0x00002000,
        [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 4)]
        PinToTaskbar = 0x00004000,
    };

    // Enumeration that define a compute systems state.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    enum ComputeSystemState
    {
        Unknown = 0,
        Creating = 1,
        Created = 2,
        Starting = 3,
        Running = 4,
        Pausing = 5,
        Paused = 6,
        Saving = 7,
        Saved = 8,
        Stopping = 9,
        Stopped = 10,
        Restarting = 11,
        Deleting = 12,
        Deleted = 13,
    };

    // The result object returned to Dev Home by an IComputeSystemProvider when its requested to retrieve a
    // list of IComputeSystems.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ComputeSystemsResult
    {
        // Used when retrieving the list of IComputeSystem's was successful.
        ComputeSystemsResult(IIterable<IComputeSystem> computeSystems);

        // Used when retrieving the list of IComputeSystem's was unsuccessful.
        // The extension can provide Dev Home with an error message to be displayed in the UI, by providing
        // a non-empty value for the displayMessage. diagnosticText can be used to send non-localized error
        // information back to Dev Home
        ComputeSystemsResult(HRESULT e, String displayMessage, String diagnosticText);

        // The compute systems that were retrieved.
        IIterable<IComputeSystem> ComputeSystems
        {
            get;
        };

        // The result of the operation. This contains the ProviderOperationStatus enum value that tells Dev Home
        // whether the result was successful or failed. It is created based on the constructor that was used.
        ProviderOperationResult Result
        {
            get;
        };
    };

    // The result object returned to Dev Home when it requests the state of a IComputeSystem.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ComputeSystemStateResult
    {
        // Used when retrieving the state of the compute system was successful.
        ComputeSystemStateResult(ComputeSystemState computeSystemState);

        // Used when retrieving the state of the compute system was unsuccessful.
        // The extension can provide Dev Home with an error message to be displayed in the UI, by providing
        // a non-empty value for the displayMessage. diagnosticText can be used to send non-localized error
        // information back to Dev Home.
        ComputeSystemStateResult(HRESULT e, String displayMessage, String diagnosticText);

        // The current state of the compute system.
        ComputeSystemState State
        {
            get;
        };

        // The result of the operation. This contains the ProviderOperationStatus enum value that tells Dev Home
        // whether the result was successful or failed. It is created based on the constructor that was used.
        ProviderOperationResult Result
        {
            get;
        };
    };

    // The result object that is returned to Dev Home when it calls a method on the IComputeSystem interface.
    // Note: Not all operations located in the ComputeSystemOperations enum will return an
    // ComputeSystemOperationResult.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ComputeSystemOperationResult 
    {
        // Used when the operation was successful.
        ComputeSystemOperationResult();

        // Used when the operation was unsuccessful.
        // The extension can provide Dev Home with an error message to be displayed in the UI, by providing
        // a non-empty value for the displayMessage. diagnosticText can be used to send non-localized error
        // information back to Dev Home.
        ComputeSystemOperationResult(HRESULT e, String displayMessage, String diagnosticText);

        // The result of the operation. This contains the ProviderOperationStatus enum value that tells Dev Home
        // whether the result was successful or failed. It is created based on the constructor that was used.
        ProviderOperationResult Result
        {
            get;
        };
    };

    // The result object returned to Dev Home when it requests for the ComputeSystems thumbnail image.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ComputeSystemThumbnailResult 
    {
        // Used when retrieving the thumbnail image was successful.
        ComputeSystemThumbnailResult(UInt8[] thumbnailInBytes);

        // Used when retrieving the thumbnail image was unsuccessful.
        // The extension can provide Dev Home with an error message to be displayed in the UI, by providing
        // a non-empty value for the displayMessage. diagnosticText can be used to send non-localized error
        // information back to Dev Home
        ComputeSystemThumbnailResult(HRESULT e, String displayMessage, String diagnosticText);

        // An array of bytes that represent the thumbnail image of the compute system that can be displayed in
        // Dev Homes UI. Note: The format of the original image should be in a format that Win UI 3 XAML
        // supports.
        UInt8[] ThumbnailInBytes
        {
            get;
        };

        // The result of the operation. This contains the ProviderOperationStatus enum value that tells Dev Home
        // whether the result was successful or failed. It is created based on the constructor that was used.
        ProviderOperationResult Result
        {
            get;
        };
    };

    // The result object returned to Dev Home when it requests to know if the Compute System is currently pinned
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 4)]
    runtimeclass ComputeSystemPinnedResult
    {
        // Used when retrieval of the Pinned status was successful
        ComputeSystemPinnedResult(Boolean isPinned);

        // Used when retrieval of the Pinned status was unsuccessful
        // The extension can provide Dev Home with an error message to be displayed in the UI, by providing
        // a non-empty value for the displayMessage. diagnosticText can be used to send non-localized error
        // information back to Dev Home
        ComputeSystemPinnedResult(HRESULT e, String displayMessage, String diagnosticText);

        // A Boolean that tells whether or not the Compute System is pinned to the Shell surface in question
        Boolean IsPinned
        {
            get;
        };

        // The result of the operation. This contains the ProviderOperationStatus enum value that tells Dev Home
        // whether the result was successful or failed. It is created based on the constructor that was used.
        ProviderOperationResult Result
        {
            get;
        };
    };


    // An enum value that extensions will use in the ComputeSystemProperty to tell Dev Home if the property is
    // one of the predefined properties or a custom property. Dev Home will use this value as a way to keep
    // predefined types formatted the same in the UI across compute system providers. The custom enum value
    // can be used for properties specific to a compute system's underlying technology. For example, a virtual
    // machine compute system may have a property for a network adapter with an IP address, while other compute
    // systems like a container may not.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    enum ComputeSystemPropertyKind 
    {
        Custom = 0,

        // predefined properties should be added below.
        CpuCount = 1,
        StorageSizeInBytes = 2,
        AssignedMemorySizeInBytes = 3,
        UptimeIn100ns = 4,
    };

    // The ComputeSystemProperty is read-only and is used to represent extension specific properties. It is up
    // Dev Home to determine how it wishes to use these properties. Extension do not have control over how/and
    // in which order they are used and/or displayed.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ComputeSystemProperty 
    {
        // Used to create a ComputeSystemProperty that uses a predefined ComputeSystemPropertyKind. Passing a
        // ComputeSystemPropertyKind.Custom to this method will result in an empty ComputeSystemProperty
        // being created. The propertyName and icon are predefined by Dev Home. The use of the custom
        // enum with the static Create method will result in an exception. Custom compute system properties
        // should only be created with the CreateCustom static method.
        static ComputeSystemProperty Create(ComputeSystemPropertyKind propertyKind, Object propertyValue);

        // Used to create a ComputeSystemProperty that uses the custom ComputeSystemPropertyKind.
        static ComputeSystemProperty CreateCustom(Object propertyValue, String propertyName, Windows.Foundation.Uri icon);

        // The Uri to the icon resource whose path is located in a resource.pri file. The schema should
        // use the ms-resource:// schema.
        // E.g "ms-resource://HyperVExtension/Files/HyperVExtension/Assets/hyper-v-provider-icon.png"
        Windows.Foundation.Uri Icon
        {
            get;
        };

        // The name associated with the ComputeSystemProperty.
        String Name
        {
            get;
        };

        // The value associated with the ComputeSystemProperty.
        Object Value
        {
            get;
        };

        // The ComputeSystemPropertyKind that was set via one of the static methods. Dev Home will use this
        // to know if the property is a predefined type or not.
        ComputeSystemPropertyKind PropertyKind
        {
            get;
        };
    };

    // The data that is passed back to Dev Home for a compute system operation that requires returning
    // progress.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass CreateComputeSystemProgressEventArgs 
    {
        CreateComputeSystemProgressEventArgs(String operationStatus, UInt32 percentageCompleted);

        // Allows extensions to provide intermediary status for the operation e.g "Downloading image file".
        String Status
        {
            get;
        };

        // Allows extensions to provide progress percentage for the operation.
        UInt32 PercentageCompleted
        {
            get;
        };
    };

    // The data that is passed back to Dev Home when the create compute system operation requires the user to
    // perform an action to continue the creation.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass CreateComputeSystemActionRequiredEventArgs 
    {
        CreateComputeSystemActionRequiredEventArgs(IExtensionAdaptiveCardSession2 correctiveActionCardSession);

        // An adaptive card that the extension can send to Dev Home to allow the user to perform a
        // correct action.
        IExtensionAdaptiveCardSession2 CorrectiveActionCardSession
        {
            get;
        };
    };

    // Forward declaration of the IApplyConfigurationOperation interface. It is defined later in the file.
    interface IApplyConfigurationOperation;

    // An interface that represents a remote machine, local VM or container.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    interface IComputeSystem 
    {
        // The name of the compute system that will appear in the UI.
        String DisplayName
        {
            get;
        };

        // Whereas the Name property is intended to provide Dev Home with a friendly name for the compute
        // system. The SupplementalDisplayName is intended to allow extensions to provide a name that may be
        // specific to the compute system's backing technology.
        String SupplementalDisplayName
        {
            get;
        };

        // The IComputeSystemProvider.Id associated with the compute system.
        String AssociatedProviderId
        {
            get;
        };

        // The Id of the compute system. These Id's should be unique per compute system from a provider.
        String Id
        {
            get;
        };

        // The IDeveloperId associated with the compute system.
        IDeveloperId AssociatedDeveloperId
        {
            get;
        };

        // The operations supported by the Compute System.These are expected to be fixed and not dynamically
        // updated once the object is created.
        ComputeSystemOperations SupportedOperations
        {
            get;
        };

        // Dev Home will subscribe to this event and extensions should implement the event.
        // With that said, it is important to note that there can be a disconnect between the underlying
        // platform for the compute system and the extension. The underlying platform may not know that the
        // extension exists and may have other means other than through the extension, for users to perform
        // operations that may change a compute system's state. However, Due to performance considerations we
        // don't recommend polling the platform in order to keep the platform and extension in sync.
        event Windows.Foundation.TypedEventHandler<IComputeSystem, ComputeSystemState> StateChanged;

        // Gets the current state of the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemStateResult> GetStateAsync();

        // Starts a stopped compute system.
        // It is recommended to return success for redundant operations and return failure if the operation
        // doesn't apply due to the current state of the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> StartAsync(String options);

        // Gracefully shuts down a running compute system.
        // Note: It is recommended to return success for redundant operations and return failure if the
        // operation doesn't apply due to the current state of the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> ShutDownAsync(String options);

        // Restarts a running compute system.
        // Note: It is recommended to return success for redundant operations and return failure if the
        // operation doesn't apply due to the current state of the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> RestartAsync(String options);

        // Terminates a running Compute System. This is equivalent to removing the power cable of a running
        // computer.
        // Note: It is recommended to return success for redundant operations and return failure if the
        // operation doesn't apply due to the current state of the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> TerminateAsync(String options);

        // Deletes the compute system.
        // Note: It is recommended to return success for redundant operations and return failure if the
        // operation doesn't apply due to the current state of the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> DeleteAsync(String options);

        // Saves the state of a running Compute System.
        // Note: It is recommended to return success for redundant operations and return failure if the
        // operation doesn't apply due to the current state of the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> SaveAsync(String options);

        // Pauses a running Compute System.
        // Note: It is recommended to return success for redundant operations and return failure if the
        // operation doesn't apply due to the current state of the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> PauseAsync(String options);

        // Resumes a paused Compute System.
        // Note: It is recommended to return success for redundant operations and return failure if the
        // operation doesn't apply due to the current state of the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> ResumeAsync(String options);

        // Creates a snapshot of the compute system.
        // Note: It is recommended to return success for redundant operations and return failure if the
        // operation doesn't apply due to the current state of the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> CreateSnapshotAsync(String options);

        // Applies a previously saved snapshot of the compute system.
        // Note: It is recommended to return success for redundant operations and return failure if the
        // operation doesn't apply due to the current state of the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> RevertSnapshotAsync(String options);

        // Deletes a previously saved snapshot of the compute system.
        // Note: It is recommended to return success for redundant operations and return failure if the
        // operation doesn't apply due to the current state of the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> DeleteSnapshotAsync(String options);

        // Modifies a compute systems properties.
        // Note: This method takes a json string that the compute system can use to modify its properties.
        // The string passed to this method should have intrinsic meaning to the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> ModifyPropertiesAsync(String inputJson);

        // Gets the thumbnail image associated with the compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemThumbnailResult> GetComputeSystemThumbnailAsync(String options);

        // Gets the properties associated with the compute system.
        Windows.Foundation.IAsyncOperation<IIterable<ComputeSystemProperty> > GetComputeSystemPropertiesAsync(String options);

        // Connects to a compute system.
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> ConnectAsync(String options);

        // Creates an instance of IApplyConfigurationOperation interface that's used to apply a
        // configuration to a compute system. This method expects the configuration to be passed in
        // via a string.
        IApplyConfigurationOperation CreateApplyConfigurationOperation(String configuration);
    };

    // An interface that represents a remote machine, local VM or container. Specifically this interface
    // allows the extension to be pinned or unpinned from the Start Menu or Taskbar, and allows the calling
    // app to check whether or not the extension is pinned.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 4)] 
    interface IComputeSystem2 requires IComputeSystem
    {
        // Pins the Compute System to the Start Menu
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> PinToStartMenuAsync();

        // Unpins the Compute System from the Start Menu
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> UnpinFromStartMenuAsync();

        // Pins the Compute System to the Taskbar
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> PinToTaskbarAsync();

        // Unpins the Compute System from the Taskbar
        Windows.Foundation.IAsyncOperation<ComputeSystemOperationResult> UnpinFromTaskbarAsync();

        // Returns whether or not the Compute System is pinned to the Start Menu
        Windows.Foundation.IAsyncOperation<ComputeSystemPinnedResult> GetIsPinnedToStartMenuAsync();

        // Returns whether or not the Compute System is pinned to the taskbar
        Windows.Foundation.IAsyncOperation<ComputeSystemPinnedResult> GetIsPinnedToTaskbarAsync();
    }

    // The current state of a configuration set.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    enum ConfigurationSetState 
    {
        // The state of the configuration set is unknown.
        Unknown,
        // The configuration set is in the queue to be applied.
        Pending,
        // The configuration set is actively being applied.
        InProgress,
        // The configuration set has completed being applied.
        Completed,
        // Shutting down device (e.g. for offline provisioning)
        ShuttingDownDevice,
        // Starting device (e.g. after offline provisioning)
        StartingDevice,
        // Restarting device (e.g. after online provisioning that requires restart)
        RestartingDevice,
        // Provisioning device with binaries needed for Configure operation.
        ProvisioningDevice,
        // Waiting for an admin logon (e.g. to complete operation that requires admin user)
        WaitingForAdminUserLogon,
        // Waiting for user's logon (e.g. to run "WinGet configure")
        WaitingForUserLogon
    };

    // The current state of a configuration unit.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    enum ConfigurationUnitState 
    {
        // The state of the configuration unit is unknown.
        Unknown,
        // The configuration unit is in the queue to be applied.
        Pending,
        // The configuration unit is actively being applied.
        InProgress,
        // The configuration unit has completed being applied.
        Completed,
        // The configuration unit was not applied due to external factors.
        Skipped,
    };

    // The source of a result; for instance, the part of the system that generated a failure.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    enum ConfigurationUnitResultSource 
    {
        // The source is not known, or more likely, there was no failure.
        None,
        // The result came from inside the configuration system; this is likely a bug.
        Internal,
        // The configuration set was ill formed. For instance, referencing a configuration unit
        // that does not exist or a dependency that is not present.
        ConfigurationSet,
        // The external module that processes the configuration unit generated the result.
        UnitProcessing,
        // The system state is causing the error.
        SystemState,
        // The configuration unit was not run due to a precondition not being met.
        // For example, if a dependency fails to be applied, this will be set.
        Precondition,
    };

    // Defines how the configuration unit is to be used within the configuration system.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    enum ConfigurationUnitIntent 
    {
        // The configuration unit will only be used to Test the current system state.
        Assert,

        // The configuration unit will only be used to Get the current system state.
        Inform,

        // The configuration unit will be used to Apply the current system state.
        // The configuration unit will be used to Test and Get the current system state as part of that process.
        Apply,

        // The configuration unit's intent is unknown. This maps to WinGets unknown type but is currently not
        // not in use by WinGet.
        Unknown,
    };

    // Information on a result for a single unit of configuration.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ConfigurationUnitResultInformation 
    {
        ConfigurationUnitResultInformation(HRESULT resultCode, String description, String details, ConfigurationUnitResultSource resultSource);

        // The error code of the failure.
        HRESULT ResultCode
        {
            get;
        };

        // The short description of the failure.
        String Description
        {
            get;
        };

        // A more detailed error message appropriate for diagnosing the root cause of an error.
        String Details
        {
            get;
        };

        // The source of the result.
        ConfigurationUnitResultSource ResultSource
        {
            get;
        };
    }

    // The result of calling OpenConfigurationSet, containing either the set or details about the failure.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass OpenConfigurationSetResult
    {
        OpenConfigurationSetResult(HRESULT resultCode, String field, String fieldValue, UInt32 line, UInt32 column);

        // The result from opening the set.
        HRESULT ResultCode
        {
            get;
        };

        // The field that is missing/invalid, if appropriate for the specific ResultCode.
        String Field
        {
            get;
        };

        // The value of the field, if appropriate for the specific ResultCode.
        String Value
        {
            get;
        };

        // The line number for the failure reason, if determined.
        UInt32 Line
        {
            get;
        };

        // The column number for the failure reason, if determined.
        UInt32 Column
        {
            get;
        };
    }

    // A single unit of configuration.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ConfigurationUnit 
    {
        ConfigurationUnit(
            String type,
            String identifier,
            ConfigurationUnitState state, 
            Boolean isGroup, 
            Windows.Foundation.Collections.IVector<ConfigurationUnit> units, 
            Windows.Foundation.Collections.ValueSet settings, 
            ConfigurationUnitIntent intent);

        // The type of the unit being configured; not a name for this instance.
        String Type
        {
            get;
        };

        // The identifier name of this instance within the set.
        String Identifier
        {
            get;
        };

        // The current state of the configuration unit.
        ConfigurationUnitState State
        {
            get;
        };

        // Determines if this configuration unit should be treated as a group.
        // A configuration unit group treats its `Settings` as the definition of child units.
        Boolean IsGroup
        {
            get;
        };

        // The configuration units that are part of this unit (if IsGroup is true).
        Windows.Foundation.Collections.IVector<ConfigurationUnit> Units
        {
            get;
        };

        // Contains the values that are for use by the configuration unit itself.
        Windows.Foundation.Collections.ValueSet Settings
        {
            get;
        };

        // Describes how this configuration unit will be used.
        ConfigurationUnitIntent Intent
        {
            get;
        };
    }

    // The change event type that has occurred for a configuration set change.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)] enum ConfigurationSetChangeEventType {
        Unknown,
        // The change event was for the set state. Only ConfigurationSetChangeData.SetState is valid.
        SetStateChanged,
        // The change event was for the unit state. All ConfigurationSetChangeData properties are valid.
        UnitStateChanged,
    };

    // The change data sent about changes to a specific set.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ConfigurationSetChangeData 
    {
        ConfigurationSetChangeData(
            ConfigurationSetChangeEventType change, 
            ConfigurationSetState setState, 
            ConfigurationUnitState unitState, 
            ConfigurationUnitResultInformation resultInformation, 
            ConfigurationUnit unit);

        // The change event type that occurred.
        ConfigurationSetChangeEventType Change
        {
            get;
        };

        // The state of the configuration set for this event (the ConfigurationSet can be used to get the current state, which may be different).
        ConfigurationSetState SetState
        {
            get;
        };

        // The state of the configuration unit for this event (the ConfigurationUnit can be used to get the current state, which may be different).
        ConfigurationUnitState UnitState
        {
            get;
        };

        // Contains information on the result of the attempt to apply the configuration unit.
        ConfigurationUnitResultInformation ResultInformation
        {
            get;
        };

        // The configuration unit whose state changed.
        ConfigurationUnit Unit
        {
            get;
        };
    }

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ApplyConfigurationUnitResult
    {
        ApplyConfigurationUnitResult(
            ConfigurationUnit unit, 
            ConfigurationUnitState state, 
            Boolean previouslyInDesiredState, 
            Boolean rebootRequired, 
            ConfigurationUnitResultInformation resultInformation);

        // The configuration unit that was applied.
        ConfigurationUnit Unit
        {
            get;
        };

        // The state of the configuration unit with regards to the current execution of ApplySet.
        ConfigurationUnitState State
        {
            get;
        };

        // Will be true if the configuration unit was in the desired state (Test returns true) prior to the apply action.
        Boolean PreviouslyInDesiredState
        {
            get;
        };

        // Indicates whether a reboot is required after the configuration unit was applied.
        Boolean RebootRequired
        {
            get;
        };

        // The result of applying the configuration unit.
        ConfigurationUnitResultInformation ResultInformation
        {
            get;
        };
    }

    // The result of applying the settings for a configuration set.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ApplyConfigurationSetResult 
    {
        ApplyConfigurationSetResult(HRESULT resultCode, Windows.Foundation.Collections.IVectorView<ApplyConfigurationUnitResult> unitResults);

        // Results for each configuration unit in the set.
        Windows.Foundation.Collections.IVectorView<ApplyConfigurationUnitResult> UnitResults
        {
            get;
        };

        // The overall result from applying the configuration set.
        HRESULT ResultCode
        {
            get;
        };
    }

    // The entire result of applying the configuration operation.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ApplyConfigurationResult
    {
        ApplyConfigurationResult(OpenConfigurationSetResult openConfigurationSetResult, ApplyConfigurationSetResult applyConfigurationSetResult);

        ApplyConfigurationResult(HRESULT e, String displayMessage, String diagnosticText);

        // The overall result from applying the configuration set (Open configuration, apply configuration and anything in between).
        ProviderOperationResult Result
        {
            get;
        };

        // The result of opening the configuration set.
        OpenConfigurationSetResult OpenConfigurationSetResult
        {
            get;
        };

        // The result of applying the configuration set.
        ApplyConfigurationSetResult ApplyConfigurationSetResult
        {
            get;
        };
    };

    // The data that is passed back to Dev Home when the apply configuration operation requires the user to perform an action to continue the configuration.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ApplyConfigurationActionRequiredEventArgs
    {
        ApplyConfigurationActionRequiredEventArgs(IExtensionAdaptiveCardSession2 correctiveActionCardSession);

        // An adaptive card that the extension can send to Dev Home to allow the user to perform an action.
        IExtensionAdaptiveCardSession2 CorrectiveActionCardSession
        {
            get;
        };
    };

    // The data that is passed back to Dev Home that contains the progress data of the the apply configuration operation.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    runtimeclass ConfigurationSetStateChangedEventArgs 
    {
        ConfigurationSetStateChangedEventArgs(ConfigurationSetChangeData configurationSetChangeData);

        // Allows extensions to provide intermediary status for the operation.
        ConfigurationSetChangeData ConfigurationSetChangeData
        {
            get;
        };
    };

    // The interface returned by the IComputeSystem when the CreateApplyConfigurationOperation method is called.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 2)]
    interface IApplyConfigurationOperation
    {
        // Event that Dev Home can subscribe to to receive data that the user needs to take action on.
        event Windows.Foundation.TypedEventHandler<IApplyConfigurationOperation, ApplyConfigurationActionRequiredEventArgs> ActionRequired;

        // Event that DevHome can subscribe to to receive progress data from the operation.
        event Windows.Foundation.TypedEventHandler<IApplyConfigurationOperation, ConfigurationSetStateChangedEventArgs> ConfigurationSetStateChanged;

        // Used to initiate the apply configuration operation. Dev Home should subscribe to the events before attempting to start the operation.
        Windows.Foundation.IAsyncOperation<ApplyConfigurationResult> StartAsync();
    };

    // End of Dev Environments feature.

    // Begin FileExplorerSourceControlIntegration APIs

    // This interface is responsible for obtaining and relaying information on the repository
    // from source control technology
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 5)]
    interface ILocalRepository
    {
        // This function returns the requested information on a relative file path (under a
        // tracked repository root folder) from the source control management technology.
        // The requested information includes a predefined set of properties FE is aware of.
        // These properties can be found inside docs/extensions/LocalRepository/readme.md
        Windows.Foundation.Collections.IPropertySet GetProperties(String[] properties, String relativePath);
    };

    // This interface defines the result objects that can be returned to DevHome when it tries to
    // obtain an enhanced repository. Enhanced repository is the term given to repositories for 
    // which File Explorer can display property information from version control technologies.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 5)]
    runtimeclass GetLocalRepositoryResult
    {
        GetLocalRepositoryResult(ILocalRepository repository);

        GetLocalRepositoryResult(HRESULT e, String displayMessage, String diagnosticText);

        ILocalRepository Repository
        {
            get;
        };

        ProviderOperationResult Result
        {
            get;
        };
    };

    // This interface is responsible for obtaining the ILocalRepository object given a root path
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 5)]
    interface ILocalRepositoryProvider
    {
        // The method responsible for validating and returning the ILocalRepository object given its root path
        GetLocalRepositoryResult GetRepository(String rootPath);
    };

    // End FileExplorerSourceControlIntegration APIs

    // Beginning of QuickStartProject APIs

    // Used to indicate an application such as an IDE which can be used to launch the generated quick start project.
    [experimental]
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 6)]
    interface IQuickStartProjectHost
    {
        // Name of the QuickStart project host that shows up on the UI.
        String DisplayName
        {
            get;
        };

        // Uri for icon to represent the QuickStart project host.
        // This is currently not shown anywhere but can be shown
        // in the future such as on the UI alongside the display name.
        // This Uri path needs to be located in a resource.pri file
        // and be in the format of the ms-resource:// schema.
        // E.g "ms-resource://Contoso.Extension/Files/Extension/Assets/icon.png"
        // It is also recommended to be 16x16px for best appearance
        // when displayed within the button for launching the project host.
        Windows.Foundation.Uri Icon
        {
            get;
        };
        
        // Launches the project host for the quick start project that it was created for.
        ProviderOperationResult Launch();
    }

    // Used by the extension to get any feedback provided by the user on the generated project.
    [experimental]
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 6)]
    interface IQuickStartProjectResultFeedbackHandler
    {
        // Handler to get any feedback provided to Dev Home by the user on the generated project.
        ProviderOperationResult ProvideFeedback(Boolean isPositive, String feedback);
    }

    // Used by the extension to provide information on the generated quickstart project.
    [experimental]
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 6)]
    runtimeclass QuickStartProjectResult
    {
        // Used when generating the project was successful.
        QuickStartProjectResult(IQuickStartProjectHost[] projectHosts, Windows.Foundation.Uri[] referenceSamples);

        // Used when generating the quickstart project was unsuccessful.
        // The extension can provide Dev Home with an error message to be displayed in the UI by providing
        // a non-empty value for the displayMessage. diagnosticText can be used to send non-localized error
        // information back to Dev Home.
        QuickStartProjectResult(HRESULT e, String displayMessage, String diagnosticText);

        // Used when generating the project was successful and
        // the extension would like to be get any feedback
        // provided by the user on it.
        static QuickStartProjectResult CreateWithFeedbackHandler(IQuickStartProjectHost[] projectHosts, Windows.Foundation.Uri[] referenceSamples, IQuickStartProjectResultFeedbackHandler feedbackHandler);

        // The array of hosts that support launching the project.
        IQuickStartProjectHost[] ProjectHosts
        {
            get;
        };

        // The result of the operation. This contains the ProviderOperationStatus enum value that tells Dev Home
        // whether the result was successful or failed. It is created based on the constructor that was used.
        ProviderOperationResult Result
        {
            get;
        };

        // Used to provide to Dev Home the references / samples that were used
        // by the AI in the extension or by the extension itself to generate
        // the quick start project.  Dev Home shows this to the user as the
        // references that this project was generated based on.
        Windows.Foundation.Uri[] ReferenceSamples
        {
            get;
        };

        // Used to provide Dev Home a way to pass feedback back to the
        // extension if the user provides one on the generated project.
        IQuickStartProjectResultFeedbackHandler FeedbackHandler
        {
            get;
        };
    }

    // Passed back to Dev Home to provide the progress in generating a quick start project.
    // This is used by Dev Home to show progress to the user while the project is being generated.
    [experimental]
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 6)]
    struct QuickStartProjectProgress
    {
        // Allows extensions to provide intermediary status for the operation e.g "Generating project".
        String DisplayStatus;

        // Allows extensions to provide progress for the operation.
        // Value should be in the range of 0 through 1.0.
        Double Progress;
    };

    // The result object returned to Dev Home when it calls one of the IQuickStartProjectProvider
    // CreateAdaptiveCard methods.
    [experimental]
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 6)]
    runtimeclass QuickStartProjectAdaptiveCardResult
    {
        // Used when retrieving the adaptive card session was successful.
        QuickStartProjectAdaptiveCardResult(IExtensionAdaptiveCardSession2 adaptiveCardSession);

        // Used when retrieving the adaptive card session was unsuccessful.
        // The extension can provide Dev Home with an error message to be displayed in the UI by providing
        // a non-empty value for the displayMessage. diagnosticText can be used to send non-localized error
        // information back to Dev Home.
        QuickStartProjectAdaptiveCardResult(HRESULT e, String displayMessage, String diagnosticText);

        // The adaptive card session object.
        IExtensionAdaptiveCardSession2 AdaptiveCardSession
        {
            get;
        };

        // The result of the operation. This contains the ProviderOperationStatus enum value that tells Dev Home
        // whether the result was successful or failed. It is created based on the constructor that was used.
        ProviderOperationResult Result
        {
            get;
        };
    }

    // Extensions implement this and is provided to Dev Home when CreateProjectGenerationOperation is called.
    // This allows to have an async operation can be started but also additional context reported back to Dev Home
    // as progress is being made such as a detailed log out output through the adaptive card session.
    [experimental]
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 6)]
    interface IQuickStartProjectGenerationOperation
    {
        // Adaptive card session that can be provided by the extension to supplement
        // the progress shown by Dev Home.  This can be used where the extension
        // may want to provide more progress information such as build output.
        // Extension may return null if they don't want to show any custom progress
        // other than the one based on Status and Progress.  If one is
        // provided when a progress is reported, it would be shown in a ScrollViewer
        // on the Dev Home UI scrolled to the bottom as if it is some form of log output.
        IExtensionAdaptiveCardSession2 AdaptiveCardSession
        {
            get;
        };

        // Starts the operation which generates a project based on a given prompt by the user in the
        // given output folder. The generated content in the output folder can be anything that is needed
        // for the project based on the technology it uses.  Dev Home just displays the generated content
        // in a file viewer.
        Windows.Foundation.IAsyncOperationWithProgress<QuickStartProjectResult, QuickStartProjectProgress> GenerateAsync();
    }

    // Extensions can implement this provider to provide a way to
    // create a project based on a prompt as part of the Dev Home 
    // quick start project feature.
    [experimental]
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 6)]
    interface IQuickStartProjectProvider
    {
        // Name of the QuickStart project provider that shows up on the UI.
        String DisplayName
        {
            get;
        };

        // Used to provide the URI to the terms of service for the extension
        // and its AI endpoint.  This is shown on the Dev Home UI as a link
        // and should be able to be protocol launched into the browser.
        Windows.Foundation.Uri TermsOfServiceUri
        {
            get;
        };

        // Used to provide the URI to the privacy statement for the extension
        // and its AI endpoint.  This is shown on the Dev Home UI as a link
        // and should be able to be protocol launched into the browser.
        Windows.Foundation.Uri PrivacyPolicyUri
        {
            get;
        };

        // Used to provide the sample prompts to guide the user on what types of 
        // things they can generate with the extension. This is shown on the 
        // Dev Home UI.
        String[] SamplePrompts
        {
            get;
        };

        // Adaptive card UI flow that can be provided by the extension to initialize or
        // setup anything required by it such as to install any dependencies
        // it needs or to setup its AI endpoint.  In addition, to showing the user the dependencies,
        // this flow can be used to install them through OnAction in the adaptive card session.
        // Extension may return null if there is nothing to do here.
        // This is called when the user selects in the extension provider that they want to use
        // this extension to generate the project.
        QuickStartProjectAdaptiveCardResult CreateAdaptiveCardSessionForExtensionInitialization();

        // Creates an operation which allows to generate a project based on a given prompt by the
        // user in the given output folder.  The generated content in the output folder can be anything that
        // is needed for the project based on the technology it uses.  Dev Home just displays the generated content
        // in a file viewer.
        IQuickStartProjectGenerationOperation CreateProjectGenerationOperation(String prompt, Windows.Storage.StorageFolder outputFolder);
    }

    // End of QuickStartProject APIs
}