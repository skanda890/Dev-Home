<!--  Copyright (c) Microsoft Corporation..  -->
<!--  Licensed under the MIT License.  -->

<ContentDialog
    x:Class="DevHome.SetupFlow.Views.AddRepoDialog"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="using:CommunityToolkit.WinUI.Converters"
    xmlns:ctControls="using:CommunityToolkit.WinUI.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="using:Microsoft.Xaml.Interactivity"
    xmlns:ic="using:Microsoft.Xaml.Interactions.Core"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="using:DevHome.SetupFlow.Models"
    x:Name="AddRepoContentDialog"
    x:Uid="CloneRepoDialog"
    CornerRadius="8"
    DefaultButton="Primary"
    IsPrimaryButtonEnabled="{x:Bind AddRepoViewModel.ShouldEnablePrimaryButton, Mode=OneWay}"
    PrimaryButtonClick="AddRepoContentDialog_PrimaryButtonClick"
    PrimaryButtonText="{x:Bind AddRepoViewModel.PrimaryButtonText, Mode=OneWay}"
    Style="{StaticResource DefaultContentDialogStyle}"
    mc:Ignorable="d">
    <ContentDialog.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="ms-appx:///DevHome.SetupFlow/Styles/SetupFlowStyles.xaml" />
                <ResourceDictionary>
                    <converters:BoolToVisibilityConverter
                        x:Key="NegatedBoolToVisibilityConverter"
                        FalseValue="Visible"
                        TrueValue="Collapsed" />
                    <converters:BoolToVisibilityConverter
                        x:Key="NegateBoolConverter"
                        FalseValue="True"
                        TrueValue="False" />
                    <converters:BoolToObjectConverter
                        x:Key="BoolToGlyphConverter"
                        FalseValue="&#xF03F;"
                        TrueValue="&#xF0BD;" />
                    <converters:BoolNegationConverter x:Key="BoolToNegationConverter" />
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </ContentDialog.Resources>
    <!--  ContentDialog has a padding of 24 on left/right. Extend the ScrollViewer there to show the scroll bar at the edge of the dialog.  -->
    <ScrollViewer
        Margin="-24,0"
        Padding="24,0"
        VerticalScrollBarVisibility="Auto"
        VerticalScrollMode="Auto">
        <StackPanel
            x:Name="AddRepoStackPanel"
            MinWidth="450"
            MinHeight="550"
            MaxWidth="450"
            Orientation="Vertical"
            Spacing="5">
            <StackPanel.Resources>
                <ResourceDictionary>
                    <Style
                        x:Key="ContentDialogLogInButtonStyle"
                        BasedOn="{StaticResource AccentButtonStyle}"
                        TargetType="Button">
                        <Setter Property="Background">
                            <Setter.Value>
                                <SolidColorBrush Color="{ThemeResource SystemAccentColor}" />
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ResourceDictionary>
            </StackPanel.Resources>
            <ctControls:Segmented
                x:Name="SwitchViewsSegmentedView"
                MaxWidth="445"
                HorizontalAlignment="Stretch"
                SelectionMode="Single"
                Visibility="{x:Bind AddRepoViewModel.IsSettingUpLocalMachine, Mode=OneWay}">
                <i:Interaction.Behaviors>
                    <ic:EventTriggerBehavior EventName="SelectionChanged">
                        <ic:InvokeCommandAction Command="{x:Bind AddRepoViewModel.ChangePageCommand}" CommandParameter="{x:Bind SwitchViewsSegmentedView.SelectedItem, Mode=OneWay}" />
                    </ic:EventTriggerBehavior>
                </i:Interaction.Behaviors>
                <ctControls:SegmentedItem
                    x:Name="AddViaAccountSegmentedItem"
                    x:Uid="RepoTool_AddViaAccountButton"
                    AutomationProperties.PositionInSet="1"
                    AutomationProperties.SizeOfSet="2"
                    IsEnabled="{x:Bind AddRepoViewModel.IsAccountButtonEnabled, Mode=OneWay}"
                    Tag="Account" />
                <ctControls:SegmentedItem
                    x:Name="AddViaUrlSegmentedItem"
                    x:Uid="RepoTool_AddViaUrlButton"
                    AutomationProperties.PositionInSet="2"
                    AutomationProperties.SizeOfSet="2"
                    Tag="URL" />
            </ctControls:Segmented>

            <!--  Adding a repo via URL  -->
            <TextBox
                x:Name="RepoUrlTextBox"
                x:Uid="RepoUrl"
                Margin="0,20,0,0"
                Text="{x:Bind AddRepoViewModel.Url, Mode=TwoWay}"
                Visibility="{x:Bind AddRepoViewModel.ShowUrlPage, Mode=OneWay}">
                <i:Interaction.Behaviors>
                    <ic:EventTriggerBehavior EventName="TextChanged">
                        <ic:InvokeCommandAction Command="{x:Bind AddRepoViewModel.SaveRepoUrlCommand}" CommandParameter="{x:Bind RepoUrlTextBox.Text, Mode=OneWay}" />
                    </ic:EventTriggerBehavior>
                </i:Interaction.Behaviors>
            </TextBox>
            <TextBlock
                x:Name="UrlErrorTextBlock"
                Style="{ThemeResource BaseTextBlockStyle}"
                Text="{x:Bind AddRepoViewModel.UrlParsingError, Mode=OneWay}"
                Visibility="{x:Bind AddRepoViewModel.ShouldShowUrlError, Mode=OneWay}" />

            <!--  Log into account  -->
            <!--
                Please keep SelectedIndex bound to AccountIndex.  This is used to reset the combobox to empty
                when the user navigates to the account page.
            -->
            <ComboBox
                x:Name="RepositoryProviderComboBox"
                x:Uid="RepositoryDisplay"
                Margin="0,20,0,0"
                HorizontalAlignment="Stretch"
                ItemsSource="{x:Bind AddRepoViewModel.ProviderNames}"
                SelectedIndex="{x:Bind AddRepoViewModel.AccountIndex, Mode=TwoWay}"
                Visibility="{x:Bind AddRepoViewModel.ShowAccountPage, Mode=OneWay}">
                <i:Interaction.Behaviors>
                    <ic:EventTriggerBehavior EventName="SelectionChanged">
                        <ic:InvokeCommandAction Command="{x:Bind AddRepoViewModel.RepoProviderSelectedCommand}" CommandParameter="{x:Bind RepositoryProviderComboBox.SelectedItem, Mode=OneWay}" />
                    </ic:EventTriggerBehavior>
                </i:Interaction.Behaviors>
            </ComboBox>
            <StackPanel x:Name="LoginUi" Visibility="{x:Bind AddRepoViewModel.ShouldShowLoginUi, Mode=OneWay}">
                <!--  Title and Close button  -->
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="40" />
                    </Grid.ColumnDefinitions>
                    <TextBlock
                        x:Uid="LoginUIDialogTitle"
                        Grid.Column="0"
                        Margin="16,10,0,0"
                        HorizontalAlignment="Left"
                        Style="{ThemeResource SubtitleTextBlockStyle}" />
                    <Button
                        x:Uid="LoginUIDialogCloseButton"
                        Grid.Column="1"
                        VerticalAlignment="Center"
                        Command="{x:Bind AddRepoViewModel.CancelButtonPressedCommand, Mode=OneWay}"
                        DataContext="{x:Bind}"
                        Style="{ThemeResource AlternateCloseButtonStyle}">
                        <Button.Content>
                            <SymbolIcon Symbol="Cancel" />
                        </Button.Content>
                    </Button>
                </Grid>
                <Frame Content="{x:Bind AddRepoViewModel.LoginUiContent, Mode=OneWay}" />
            </StackPanel>

            <!--  Message when the account has no repos.  -->
            <Grid
                Height="{x:Bind AddRepoStackPanel.MinWidth}"
                VerticalAlignment="Stretch"
                Visibility="{x:Bind AddRepoViewModel.ShouldShowNoRepoMessage, Mode=OneWay}">
                <TextBlock
                    VerticalAlignment="Center"
                    Text="{x:Bind AddRepoViewModel.NoRepositoriesMessage, Mode=OneWay}"
                    TextWrapping="WrapWholeWords" />
            </Grid>

            <!--  Show Repositories  -->
            <StackPanel
                x:Name="ShowRepositoriesStackPanel"
                HorizontalAlignment="Stretch"
                Orientation="Vertical"
                Spacing="10"
                Visibility="{x:Bind AddRepoViewModel.ShowRepoPage, Mode=OneWay}">
                <Grid ColumnSpacing="8" RowSpacing="10">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="auto" />
                    </Grid.ColumnDefinitions>
                    <Grid
                        x:Name="AccountAndFilterGrid"
                        Grid.Row="0"
                        Grid.ColumnSpan="2"
                        Padding="0,0,0,15"
                        BorderBrush="{ThemeResource DividerStrokeColorDefaultBrush}"
                        BorderThickness="0,0,0,1"
                        ColumnSpacing="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="1.5*" />
                        </Grid.ColumnDefinitions>
                        <SplitButton
                            x:Name="AccountSplitButton"
                            Grid.Row="0"
                            HorizontalAlignment="Stretch"
                            HorizontalContentAlignment="Left"
                            Content="{x:Bind AddRepoViewModel.SelectedAccount, Mode=OneWay}"
                            Flyout="{x:Bind AddRepoViewModel.AccountsToShow, Mode=OneWay}" />
                        <TextBox
                            x:Name="FilterTextBox"
                            x:Uid="ms-resource:///DevHome.SetupFlow/Resources/RepoTool_FilterTextBox"
                            Grid.Column="1"
                            IsEnabled="{x:Bind AddRepoViewModel.IsFetchingRepos, Mode=OneWay, Converter={StaticResource NegateBoolConverter}}"
                            TextChanged="FilterTextBox_TextChanged" />
                    </Grid>
                    <TextBlock
                        x:Uid="RepositoriesList"
                        Grid.Row="1"
                        Style="{ThemeResource BodyStrongTextBlockStyle}"
                        Visibility="{x:Bind AddRepoViewModel.IsFetchingRepos, Mode=OneWay, Converter={StaticResource NegatedBoolToVisibilityConverter}}" />

                    <!--  Granular Search UI  -->
                    <Grid
                        x:Name="GranularSearchGrid"
                        Grid.Row="2"
                        Visibility="{x:Bind AddRepoViewModel.ShouldShowGranularSearch, Mode=OneWay}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <TextBlock
                            Grid.Row="1"
                            Grid.Column="0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            FontSize="{StaticResource SmallFontSize}"
                            Foreground="{ThemeResource TextFillColorSecondary}"
                            Text="{x:Bind AddRepoViewModel.SelectionOptionsPrefix, Mode=OneWay}"
                            TextTrimming="CharacterEllipsis" />
                        <ComboBox
                            x:Name="LastPathPartComboBox"
                            Grid.Row="1"
                            Grid.Column="1"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Center"
                            BorderThickness="0"
                            ItemsSource="{x:Bind AddRepoViewModel.SelectionOptions, Mode=OneWay}"
                            PlaceholderText="{x:Bind AddRepoViewModel.SelectionOptionsPlaceholderText, Mode=OneWay}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate x:DataType="x:String">
                                    <TextBlock Text="{x:Bind}" TextTrimming="CharacterEllipsis" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                            <i:Interaction.Behaviors>
                                <ic:EventTriggerBehavior EventName="SelectionChanged">
                                    <ic:InvokeCommandAction Command="{x:Bind AddRepoViewModel.SelectionOptionsChangedCommand}" CommandParameter="{x:Bind LastPathPartComboBox.SelectedItem, Mode=OneWay}" />
                                </ic:EventTriggerBehavior>
                            </i:Interaction.Behaviors>
                        </ComboBox>
                    </Grid>
                    <HyperlinkButton
                        Grid.Row="2"
                        Grid.Column="2"
                        HorizontalAlignment="Right"
                        Click="SwitchToSearchPage"
                        Content="{x:Bind AddRepoViewModel.AskToChangeLabel, Mode=OneWay}"
                        Visibility="{x:Bind AddRepoViewModel.ShouldShowChangeSearchTermsHyperlinkButton, Mode=OneWay}" />
                </Grid>
                <Grid
                    Width="300"
                    Height="300"
                    Visibility="{x:Bind AddRepoViewModel.IsFetchingRepos, Mode=OneWay}">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <ProgressRing Grid.Row="0" />
                </Grid>
                <!--
                    Removing the SelectionChanged event into a command has far reaching changes because the item that was selected can't be passed
                    into the command.  I tried converting this to use a command on SelectionChanged and pass SelectedItems into the command.
                    I ran into issues because the viewmodel expects one repository at a time.  Not a list.
                    Another issue is .SelectRange() needs to be called to "select" repos when the dialog is opened more than once.
                -->
                <ListView
                    x:Name="RepositoriesListView"
                    Height="300"
                    HorizontalAlignment="Stretch"
                    ItemsSource="{x:Bind AddRepoViewModel.RepositoriesToDisplay, Mode=OneWay}"
                    SelectionChanged="RepositoriesListView_SelectionChanged"
                    SelectionMode="Multiple"
                    Visibility="{x:Bind AddRepoViewModel.IsFetchingRepos, Mode=OneWay, Converter={StaticResource NegatedBoolToVisibilityConverter}}">
                    <ListView.ItemTemplate>
                        <DataTemplate x:DataType="models:RepoViewListItem">
                            <Grid AutomationProperties.Name="{x:Bind RepoDisplayName}" ColumnSpacing="7">
                                <ToolTipService.ToolTip>
                                    <ToolTip Content="{x:Bind RepoDisplayName}" IsEnabled="{x:Bind IsRepoNameTrimmed, Mode=OneWay}" />
                                </ToolTipService.ToolTip>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="16" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <FontIcon
                                    Grid.Column="0"
                                    FontFamily="{StaticResource DevHomeFluentIcons}"
                                    FontSize="16"
                                    Glyph="{x:Bind IsPrivate, Mode=OneWay, Converter={StaticResource BoolToGlyphConverter}}" />
                                <TextBlock
                                    Grid.Column="1"
                                    Text="{x:Bind RepoDisplayName}"
                                    TextTrimming="CharacterEllipsis">
                                    <i:Interaction.Behaviors>
                                        <ic:EventTriggerBehavior EventName="IsTextTrimmedChanged">
                                            <ic:InvokeCommandAction Command="{x:Bind TextTrimmedCommand}" />
                                        </ic:EventTriggerBehavior>
                                    </i:Interaction.Behaviors>
                                </TextBlock>
                            </Grid>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
                <Border
                    Margin="0,5,0,0"
                    BorderBrush="{ThemeResource DividerStrokeColorDefaultBrush}"
                    BorderThickness="0,0,0,1" />
            </StackPanel>

            <!--  Search page  -->
            <Grid x:Name="SearchForMoreReposGrid" Visibility="{x:Bind AddRepoViewModel.ShouldShowSelectingSearchTerms, Mode=OneWay}">
                <Grid x:Name="GatheringSearchValuesGrid">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <ProgressRing
                        x:Name="SearchForMoreReposWaitingProgressRing"
                        Grid.Row="0"
                        HorizontalAlignment="Center" />
                </Grid>
                <Grid x:Name="ShowingSearchTermsGrid" />
            </Grid>
            <TextBlock
                x:Name="ErrorTextBlock"
                x:Uid="Repo_ToolClonePathError"
                Style="{ThemeResource BodyStrongTextBlockStyle}"
                Visibility="{x:Bind AddRepoViewModel.ShowErrorTextBox, Mode=OneWay}" />
            <!--  Repo page and URL page both have clonepath + dev drive check box  -->
            <Grid Visibility="{x:Bind AddRepoViewModel.FolderPickerViewModel.ShouldShowFolderPicker, Mode=OneWay}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="5*" />
                    <ColumnDefinition Width="auto" />
                </Grid.ColumnDefinitions>
                <!--  Folder picker  -->
                <StackPanel Grid.Column="0" Spacing="7">
                    <TextBlock x:Uid="ClonePathForTextBlock" />
                    <TextBox
                        x:Name="DevDriveCloneLocationAliasTextBox"
                        IsEnabled="False"
                        Text="{x:Bind AddRepoViewModel.FolderPickerViewModel.CloneLocationAlias, Mode=TwoWay}"
                        Visibility="{x:Bind AddRepoViewModel.FolderPickerViewModel.InDevDriveScenario, Mode=OneWay}">
                        <i:Interaction.Behaviors>
                            <ic:EventTriggerBehavior EventName="TextChanged">
                                <ic:InvokeCommandAction Command="{x:Bind AddRepoViewModel.DevDriveCloneLocationChangedCommand}" />
                            </ic:EventTriggerBehavior>
                        </i:Interaction.Behaviors>
                    </TextBox>
                </StackPanel>
                <TextBox
                    x:Name="ClonePathTextBox"
                    x:Uid="ClonePath"
                    Grid.Column="0"
                    IsEnabled="{x:Bind AddRepoViewModel.FolderPickerViewModel.IsBrowseButtonEnabled, Mode=OneWay}"
                    Text="{x:Bind AddRepoViewModel.FolderPickerViewModel.CloneLocation, Mode=TwoWay}"
                    Visibility="{x:Bind AddRepoViewModel.FolderPickerViewModel.InDevDriveScenario, Mode=OneWay, Converter={StaticResource NegatedBoolToVisibilityConverter}}">
                    <i:Interaction.Behaviors>
                        <ic:EventTriggerBehavior EventName="TextChanged">
                            <ic:InvokeCommandAction Command="{x:Bind AddRepoViewModel.SaveCloneLocationCommand}" CommandParameter="{x:Bind ClonePathTextBox.Text, Mode=OneWay}" />
                        </ic:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                </TextBox>
                <Grid Grid.Column="1">
                    <!--
                        Workaround to show a tooltip on a disabled button.
                        https://github.com/microsoft/microsoft-ui-xaml/issues/2262
                    -->
                    <TextBlock>
                        <ToolTipService.ToolTip>
                            <ToolTip x:Uid="ClearCheckboxToBrowse" Visibility="{x:Bind AddRepoViewModel.FolderPickerViewModel.IsBrowseButtonEnabled, Mode=OneWay, Converter={StaticResource NegatedBoolToVisibilityConverter}}" />
                        </ToolTipService.ToolTip>
                    </TextBlock>
                    <Button
                        x:Uid="ClonePath_Button"
                        Margin="5,27,0,0"
                        IsEnabled="{x:Bind AddRepoViewModel.FolderPickerViewModel.IsBrowseButtonEnabled, Mode=OneWay}">
                        <i:Interaction.Behaviors>
                            <ic:EventTriggerBehavior EventName="Click">
                                <ic:InvokeCommandAction Command="{x:Bind AddRepoViewModel.OpenFolderPickerCommand}" />
                            </ic:EventTriggerBehavior>
                        </i:Interaction.Behaviors>
                    </Button>
                </Grid>
            </Grid>
            <TextBlock Text="{x:Bind AddRepoViewModel.FolderPickerViewModel.FolderPickerErrorMessage, Mode=OneWay}" Visibility="{x:Bind AddRepoViewModel.FolderPickerViewModel.ShowFolderPickerError, Mode=OneWay}" />
            <Grid
                Grid.Row="2"
                Margin="0,10,0,10"
                ColumnSpacing="10"
                Visibility="{x:Bind AddRepoViewModel.EditDevDriveViewModel.ShowDevDriveInformation, Mode=OneWay}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="7*" />
                    <ColumnDefinition Width="3*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <CheckBox
                    x:Name="NewDevDriveComboBox"
                    x:Uid="NewDevDriveComboBox"
                    Grid.Row="0"
                    Grid.Column="0"
                    IsChecked="{x:Bind AddRepoViewModel.EditDevDriveViewModel.IsDevDriveCheckboxChecked, Mode=TwoWay}"
                    IsEnabled="{x:Bind AddRepoViewModel.EditDevDriveViewModel.IsDevDriveCheckboxEnabled}">
                    <i:Interaction.Behaviors>
                        <ic:EventTriggerBehavior EventName="Click">
                            <ic:InvokeCommandAction Command="{x:Bind AddRepoViewModel.MakeNewDevDriveCommand}" CommandParameter="{x:Bind NewDevDriveComboBox.IsChecked, Mode=OneWay}" />
                        </ic:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                </CheckBox>
                <HyperlinkButton
                    x:Uid="CustomizeHyperLink"
                    Grid.Row="0"
                    Grid.Column="1"
                    Margin="0,-3,0,0"
                    Padding="3"
                    Command="{x:Bind AddRepoViewModel.ShowCustomizeDevDriveWindowCommand}"
                    Visibility="{x:Bind AddRepoViewModel.EditDevDriveViewModel.ShowCustomizeOption, Mode=OneWay}" />
                <InfoBar
                    x:Uid="DevDriveDefaultDriveCheckBoxError"
                    Grid.Row="1"
                    Grid.Column="0"
                    Grid.ColumnSpan="2"
                    Margin="0,5,0,0"
                    HorizontalAlignment="Stretch"
                    IsClosable="False"
                    IsOpen="True"
                    Severity="Error"
                    Visibility="{x:Bind AddRepoViewModel.EditDevDriveViewModel.DevDriveValidationError, Mode=OneWay}" />
            </Grid>
        </StackPanel>
    </ScrollViewer>
</ContentDialog>